# -*- coding: utf-8 -*-
"""pharm prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SYdOvE-gn2Uo7GzfgkkCjdNB4PkmTWuJ

# Pharmacy monthly sales prediction

In this task I'm predicting a monthly sales data for a pharmacy using Linear Regression and Polynomial Regression .This model will help the pharmacy in stocking the appropriate type and number of drugs needed instead of over estimating and under estimating.This will help in not spending money on unnecessary drugs and actually bringing what the customers want.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import warnings
warnings.filterwarnings('ignore')

"""# loading data"""

#load csv files
df= pd.read_csv("/content/drive/MyDrive/salesdaily (1).csv")
df= pd.read_csv("/content/drive/MyDrive/saleshourly.csv (3).zip")
df= pd.read_csv("/content/drive/MyDrive/salesweekly.csv")
df= pd.read_csv("/content/drive/MyDrive/salesmonthly.csv")

"""# data exploring

Daily
"""

datadaily= pd.read_csv("/content/drive/MyDrive/salesdaily (1).csv")
datadaily.head()

datadaily.describe()

datadaily.info()

datadaily.isnull().sum()

datadaily.shape

"""hourly"""

datahourly= pd.read_csv("/content/drive/MyDrive/saleshourly.csv (3).zip")
datahourly.head()

datahourly.describe()

datahourly.info()

datahourly.isnull().sum()

datahourly.shape

"""weekly"""

dataweekly= pd.read_csv("/content/drive/MyDrive/salesweekly.csv")
dataweekly.head()

dataweekly.describe()

dataweekly.info()

dataweekly.isnull().sum()

dataweekly.shape

datamonthly= pd.read_csv("/content/drive/MyDrive/salesmonthly.csv")
datamonthly.head()

"""# EDA"""

datamonthly.describe()

datamonthly.info()

datamonthly.isnull().sum()

datamonthly.shape

datamonthly.duplicated().sum()

datamonthly.value_counts()

#grouping products
products= ['M01AB', 'M01AE', 'N02BA', 'N02BE', 'N05B', 'N05C', 'R03', 'R06']
print(products)

datamonthly['datum']= pd.to_datetime(datamonthly['datum'])
datamonthly['yearly']= datamonthly['datum'].dt.year
print("years in file:", (datamonthly['yearly'].unique()))

#sales of each product monthly
datamonthly['Month'] = datamonthly['datum'].dt.month
salesmonthly = datamonthly.groupby('Month')[products].sum()
print(salesmonthly)

def plot_monthly_sales(product_column):
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=datamonthly, x='datum', y=product_column)
    plt.title(f'Monthly Sales for {product_column}')
    plt.xlabel('Date')
    plt.ylabel('Sales')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

#sales of each product yearly
salesyearly= datamonthly.groupby('yearly')[products].sum()
print(salesyearly)

#rank of products sold per month
monthly_rank = salesmonthly.rank(axis=1, ascending=False)
print("Rank of products sold per month:")
print(monthly_rank)

#plt.figure(figsize=(10, 10))
sns.heatmap(monthly_rank, annot=True, cmap='YlGnBu', linewidth=.5)

plt.title('Rank per products and per years')

plt.show()

#rank of products sold per year
yearly_rank = salesyearly.rank(axis=1, ascending=False)
print("Rank of products sold per year:")
print(yearly_rank)

plt.figure(figsize=(10, 8))
sns.heatmap(yearly_rank, annot=True, cmap='YlGnBu', linewidth=.5)

plt.title('Rank per products and per years')

plt.show()

datamonthly['Month'] = datamonthly['datum'].dt.month
salesmonthly = datamonthly.groupby('Month')[products].sum()
print(salesmonthly)

from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""# feature engineering,model selection,model training and evaluation"""

#feature engineering
x = datamonthly.drop(products + ['datum'], axis=1)
y = datamonthly['datum']

#linear regression
model = LinearRegression()
# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model.fit(x_train, y_train)

y_pred = model.predict(x_test)

#accuracy
y_pred = model.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

#polynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=2)
x_poly = poly.fit_transform(x)

model = LinearRegression()

# Split the polynomial features into training and testing sets
x_poly_train, x_poly_test, y_train_poly, y_test_poly = train_test_split(x_poly, y, test_size=0.2, random_state=42)

model.fit(x_poly_train, y_train_poly)

# Use the polynomial test features for prediction
y_pred_poly = model.predict(x_poly_test)

#accuracy for polynomial regression
mse_poly = mean_squared_error(y_test_poly, y_pred_poly)
r2_poly = r2_score(y_test_poly, y_pred_poly)
print(f"Mean Squared Error: {mse_poly}")
print(f"R-squared: {r2_poly}")

# scatter plot for polynomial regression
datamonthly['datum'] = pd.to_datetime(datamonthly['datum'])
# Iterate through each product and train a separate polynomial regression model
for i, product in enumerate(products):
    # Prepare the target variable for the current product
    y_product = datamonthly[product]

    # Create and train the polynomial regression model for the current product
    poly = PolynomialFeatures(degree=2)
    x_poly = poly.fit_transform(x) # x still contains 'yearly' and 'Month'
    model = LinearRegression()
    model.fit(x_poly, y_product)

    # Predict the sales for the current product
    y_pred_product = model.predict(x_poly)

    # Plot actual and predicted sales for the current product
    plt.figure(figsize=(12, 6))
    plt.scatter(datamonthly['datum'], y_product, color='blue', label=f'Actual Data - {product}')
    plt.plot(datamonthly['datum'], y_pred_product, color='red', linewidth=2, label=f'Polynomial Regression - {product}')
    plt.title(f'Sales for {product} with Polynomial Regression')
    plt.xlabel('Date')
    plt.ylabel('Sales')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

"""# model optimization and reporting"""

#hyperparameter tuning,cross-validation,visualizing results
from sklearn.model_selection import GridSearchCV

model = LinearRegression()

param_grid = {
    'fit_intercept': [True, False]
}

grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')

grid_search.fit(x_train, y_train)

best_params = grid_search.best_params_
best_model = grid_search.best_estimator_

print("Best Parameters:", best_params)